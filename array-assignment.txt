Q1. Calculate the product of all the element in the given array.?

Ans. 

public class productArrayElement{
    public static void main(String[] args) {
        int[] arr = {14, 23, 45, 21, 65, 90, 10};

        int product = 1;

        for(int i=0; i<arr.length; i++){
            product*=arr[i];
        }
        System.out.println(product);
    }
}

Q2. Find the second largest element int the given array?

Ans.

public class secondLargestElement {
    public static void main(String[] args) {
        int[] arr= {20, 40, 23, 12, 43, 54, 90, 78, 76};

        int n = arr.length;

        int mx = arr[0];
        for(int i =1; i<n; i++){
            if(arr[i]>mx){
                mx = arr[i];
            }
        }
        System.out.println(mx);

        int second_mx = Integer.MIN_VALUE;
        for(int i = 0; i<n ;i++){
            if(arr[i]>second_mx && arr[i] != mx){
                second_mx = arr[i];
            }
        }
        System.out.println(second_mx);
    }
}


Q3. Find the minimum value out of all the element in array?

Ans. 

public class minimumValueElemetArray {
    public static void main(String[] args) {
        int[] arr = {14, 23, 45, 21, 65, 90, 10};
        int n = arr.length;

        int min = Integer.MAX_VALUE;
        for(int i =0; i<n ; i++){
            if(arr[i]<min){
                min = arr[i];
            }
        }
        System.out.println(min);
    }
}


Q4. WAP to fint the duplicate element from the given array of element?

Ans. 

public class duplicateElement {
    public static void main(String[] args) {
        int[] arr = {14, 23, 45, 21, 45, 21, 65, 90, 10};
        int n = arr.length;

        for(int i =0; i<n; i++){
            for(int j = i+1; j<arr.length; j++){
                if(arr[i]==arr[j]){
                    System.out.println("Duplicate element is : " + arr[j]);
                }
            }
        }
    }
}


Q5. WAP to find the smallest missing positive element in the sorted Array. (take the array as input)

Ans. Try this later

Predict the output.

public class Main {
public static void main(String[] args) {
int[] sub = new int[50];
for (int i = 0; i <= 48; i++) {
sub[i] = i;
System.out.println(sub[i]);
}
}
}

Ans. 0 to 48 will be printed.

Q6. Count the number of elements strictly greater than x.

Ans. 


public class countElementGreaterX {
    public static void main(String[] args) {
        int[] arr= {20, 40, 23, 12, 43, 54, 90, 78, 76};
        int x = 40;
        int n = arr.length;

        for(int i = 0; i<n; i++){
            if (arr[i] > x){
                System.out.print(arr[i]+" ");
            }
        }
    }
}


Q7. WAP to find the largest three elements in the array.

Ans. 

public class largestThreeElement {
    public static void main(String[] args) {
        int[] arr= {20, 40, 23, 12, 43, 54, 90, 78, 76};

        int n = arr.length;

        int mx = Integer.MIN_VALUE;
        for(int i =0; i<n; i++){
            if(arr[i]>mx){
                mx = arr[i];
            }
        }
        System.out.println(mx);

        int second_mx = Integer.MIN_VALUE;
        for(int i = 0; i<n ;i++){
            if(arr[i]>second_mx && arr[i] != mx){
                second_mx = arr[i];
            }
        }
        System.out.println(second_mx);

        int third_mx = Integer.MIN_VALUE;
        for(int i =0; i<n; i++){
            if(arr[i]>third_mx && arr[i] != second_mx && arr[i] != mx ){
                third_mx = arr[i];
            }    
        }
        System.out.println(third_mx);
    }
}


Q8. Check if the given array is sorted or not?

Ans. 


public class checkSortedArray {

    public static boolean isSorted(int[] arr){
        int n = arr.length;
        
        for(int i= 1; i<n; i++){
            if(arr[i-1]>arr[i]){
                return false;
            }
        }
        return  true;
    }
    public static void main(String[] args) {
        int arr[] = {23,65,74,94, 34, 108};
        int arr2[]  = {1,2,3,4,5};

        System.out.println(isSorted (arr)); 
        System.out.println(isSorted (arr2));
    }
}


Q9. Find the difference between the sum of elements at even indices to the sum of elements at odd indices.?

Ans. 

class diffOfSumOfOddEvenElement{
    public static void main(String[] args) {
        int[] arr = {23,67,34,21,56,90,67,84,35,29,40};
        int n = arr.length;

        int evenSum = 0;
        int oddSum = 0;

        for(int i=0; i<n;i++){
            if(i%2==0) evenSum += arr[i];
            else oddSum +=arr[i];            
        }

        System.out.println(Math.abs(evenSum - oddSum));
    }
}


Q10. Given an array of integers, change the value of all odd indexed elements to its second multiple and increment all even indexed values by 10?

Ans.

public class arrayIncrementTenDouble {
    public static void main(String[] args) {
        int[] arr = {23,67,34,21,56,90,67,84,35,29,40};
        int n = arr.length;

        for(int i =0; i < n; i++){
            if(i%2 == 0){
                arr[i]+=10;
            }
            else{
                arr[i]*=2;
            }
        }
        System.out.println("Array after modifications:");
        for(int ele : arr){
            System.out.print(ele + " ");
        }
    }
}


Q11.  Find the unique number in a given Array where all the elements are being repeated twice with one value being unique.?

Ans. 

public class uniqueNumber {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 3, 2, 1, 5, 6, 6, 5,4,7};
        int n =  arr.length; 

        int unique = findUnique(arr);
        System.out.println(unique);
    }

    private static int findUnique(int[] arr) {
        int uniqueInteger = 0 ;

        for(int i=0; i<arr.length; i++){
            uniqueInteger = uniqueInteger^arr[i];
        }
        return uniqueInteger;
    }
}

Q12. If an array contain n elements, then chck the given array is palindrome or not?

Ans. 


public class palindromeArray {
    public static void main(String[] args) {

        int arr1[] = {1,0,0,1};
        int arr2[] = {3,5,2,6,8};

        System.out.println(isPalindrome(arr1));
        System.out.println(isPalindrome(arr2));
        
    }
    static boolean isPalindrome(int[] arr){
        int i = 0; 
        int j = arr.length -1;
        while(i<j){
            if(arr[i] != arr[j]){
                return false;
            }
           i++;
           j--;
        }
        return true;
    }
}


Q13. Find the error

double getAverage(int arr[], int size);

public static void main(String[] args) {

        int[] balance = {1000, 2, 3, 17, 50};

        double avg;


        avg = getAverage(balance[0], 5);

        System.out.println("Average value is: " + avg);

}

Ans. The set average function is not correctly implemented. It should calculate the average of the array, but it is only taking the first element of the array and size as the parameter.



Q14. You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
Merge nums1 and nums2 into a single array sorted in non-decreasing order.

Ans. 


public class mergeSortedArray {
    public static void main(String[] args) {
        int arr1[] = {12,23,34,45,56,67};
        int arr2[] = {21,32,43,54,65,76,87,98};

        int m=arr1.length;
        int n = arr2.length;

        int i=0, j=0, k=0;

        int[] result = new int[m+n];

        while(i<m && j<n){
            if(arr1[i]<arr2[j]){
                result[k++] = arr1[i++];
            }else{
                result[k++] = arr2[j++];
            }
        }
        while(i<m){
            result[k++]= arr1[i++];
        }
        while(j<m){
            result[k++] = arr2[j++];
        }

        for(int ele : result){
            System.out.print(ele + " ");
        }
    }
}


Q15. Count the number of triplets whose sum is equal to the given value x.

Ans. 

public class threeSum {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        int n = arr.length;

        int x = 15;
        int result = countTripletSum(arr, x);
        System.out.println("Triplets that sum to " + x +" is "+ result);
    }

    
    static int countTripletSum(int[] arr, int x){

        int n=arr.length;
        int count =0;

        

        for(int i=0; i<n-2; i++){
            for(int j=i+1; j<n-1;j++){
                for(int k =j+1; k<n; k++){
                    if(arr[i] + arr[j] + arr[k] == x){
                        // System.out.println(arr[i] + arr[j] + arr[k]);
                        count++;
                    }
                }
            }
        }

        return count;
    }
}


Q16.  Find the factorial of a large number.
Hint :- use an array to store every digit of answer.

Ans. 

import java.util.Arrays;

public class LargeFactorial {

    static void findFactorial(int n) {
        int[] result = new int[10000];
        Arrays.fill(result, 0);

        // Initialize the result with 1
        result[0] = 1;
        int resultSize = 1;

        // Multiply numbers from 2 to n
        for (int i = 2; i <= n; i++) {
            resultSize = multiply(result, i, resultSize);
        }

        // Print the result
        System.out.println("Factorial of " + n + " is:");
        for (int i = resultSize - 1; i >= 0; i--) {
            System.out.print(result[i]);
        }
    }

    static int multiply(int[] result, int x, int resultSize) {
        int carry = 0;

        // Multiply each digit of the result with x
        for (int i = 0; i < resultSize; i++) {
            int product = result[i] * x + carry;
            result[i] = product % 10;
            carry = product / 10;
        }

        // Handle the remaining carry
        while (carry > 0) {
            result[resultSize] = carry % 10;
            carry = carry / 10;
            resultSize++;
        }

        return resultSize;
    }

    public static void main(String[] args) {
        int n = 50; // Change this to the desired number
        findFactorial(n);
    }
}

Q17. Find the first non-repeaing element in the array.

Ans.

import java.util.ArrayList;

public class FirstNonRepeatingElement {

    static int findFirstNonRepeating(int[] arr) {
        int[] frequency = new int[256]; // Assuming ASCII characters
        int[] firstOccurrenceIndex = new int[256];
        ArrayList<Integer> nonRepeatingList = new ArrayList<>();

        for (int i = 0; i < arr.length; i++) {
            int element = arr[i];

            // Update frequency array
            frequency[element]++;

            // Update first occurrence index array
            if (frequency[element] == 1) {
                firstOccurrenceIndex[element] = i;
            }

            // Update non-repeating list
            if (frequency[element] == 1) {
                nonRepeatingList.add(element);
            } else {
                nonRepeatingList.remove(Integer.valueOf(element));
            }
        }

        // Find the first non-repeating element from the non-repeating list
        return nonRepeatingList.isEmpty() ? -1 : nonRepeatingList.get(0);
    }

    public static void main(String[] args) {
        int[] arr = {4, 2, 5, 6, 2, 5, 4};
        int result = findFirstNonRepeating(arr);

        if (result != -1) {
            System.out.println("First non-repeating element: " + result);
        } else {
            System.out.println("No non-repeating element found.");
        }
    }
}

